using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using TMPro;

public class TileInfo : MonoBehaviour
{
    private Tile tile; // The logical data for this tile

    public int x;
    public int y;  

    public bool hasChild{get; private set;} = false;

    [SerializeField]
    private TextMeshProUGUI tileInfo;

    // For visual feedback on the blink
    private Renderer unitRenderer; 
    // Stores the original color of the unit
    private Color originalColor; 
    // Tracks whether the unit is blinking
    private bool isBlinking = false;

    /// <summary>
    /// Initializes the TileVisuals with terrain and resources.
    /// </summary>
    /// <param name="terrain">The terrain data for this tile.</param>
    /// <param name="resources">The resources on this tile.</param>
    public void Initialize(Lands land)
    {
        // Create the Tile object
        tile = new Tile(land);
        unitRenderer = GetComponent<Renderer>();
        originalColor = unitRenderer.material.color;
    }
    public void checkChild(){
        if(this.transform.childCount > 0 ){
            hasChild = true;
        }else{
            hasChild = false;
        }
    }
    

    public List<Resources> GetResources(){
        return tile.resources;
    }    

    public void AddResources(Resources resources){
        tile.AddResource(resources);
    }

    public void RemoveResources(Resources resources){
        tile.RemoveResource(resources);
    }
    /// <summary>
    /// Gets the total Coins generated by this tile.
    /// </summary>
    /// <returns>Total Coins.</returns>
    public int GetTotalCoins()
    {
        return tile.CalculateCoins();
    }

    /// <summary>
    /// Gets the total Food generated by this tile.
    /// </summary>
    /// <returns>Total Food.</returns>
    public int GetTotalFood()
    {
        return tile.CalculateFood();
    }

    /// <summary>
    /// Gets the unique code for this tile.
    /// </summary>
    /// <returns>The tile's unique code.</returns>
    public string GetTileNameAndResources()
    {
        return tile.GetTileNameAndResources();
    }

    private void OnMouseDown(){
        UnitSelectManager unitSelectManager = FindFirstObjectByType<UnitSelectManager>();

        TileSelectManager tileSelectManager = FindFirstObjectByType<TileSelectManager>();
        if (tileSelectManager.selectedTile == this)
        {
            tileSelectManager.DeselectTile(this);
        }
        else
        {
            tileSelectManager.SelectTile(this);
        }
        
    }

    public void OnSelected()
    {
        isBlinking = true;
        StartCoroutine(BlinkEffect());
    }

    public void OnDeselected()
    {
        StopCoroutine(BlinkEffect());
        isBlinking = false;
        unitRenderer.material.color = originalColor;
    }

    private IEnumerator BlinkEffect()
    {
        //checks if the tile is supposed to be blinking
        isBlinking = true;
        // Adjust blinking speed
        float blinkSpeed = 2f; 

        while (isBlinking)
        {
            // Transition to white
            float t = 0f;
            while (t < 1f)
            {
                t += Time.deltaTime * blinkSpeed;
                unitRenderer.material.color = Color.Lerp(originalColor, Color.white, t);
                yield return null;
            }

            // Transition back to the original color
            t = 0f;
            while (t < 1f)
            {
                t += Time.deltaTime * blinkSpeed;
                unitRenderer.material.color = Color.Lerp(Color.white, originalColor, t);
                yield return null;
            }
        }
    }
}